{%- from "node_modules/govuk-frontend/govuk/components/input/macro.njk" import govukInput -%}
{%- from "node_modules/govuk-frontend/govuk/components/textarea/macro.njk" import govukTextarea -%}
{%- from "node_modules/govuk-frontend/govuk/components/radios/macro.njk" import govukRadios -%}
{%- from "node_modules/govuk-frontend/govuk/components/checkboxes/macro.njk" import govukCheckboxes -%}
{%- from "node_modules/govuk-frontend/govuk/components/select/macro.njk" import govukSelect -%}
{%- from "node_modules/govuk-frontend/govuk/components/date-input/macro.njk" import govukDateInput -%}
{%- from "node_modules/govuk-frontend/govuk/components/summary-list/macro.njk" import govukSummaryList -%}
{%- from "node_modules/govuk-frontend/govuk/components/button/macro.njk" import govukButton -%}
{%- from "node_modules/govuk-frontend/govuk/components/character-count/macro.njk" import govukCharacterCount -%}

{% macro compileMultiValueAnswer(answerSchema, selectedAnswers) %}
  {% if selectedAnswers %}
    {% set newAnswerSchema = [] %}
    {% for answer in answerSchema %}
      {% if answer.text in selectedAnswers %}
          {% set thisSchemaItem = answerSchema[loop.index0] | updateJsonValue('selected', true) %}
          {% set newAnswerSchema = (newAnswerSchema.push(thisSchemaItem), newAnswerSchema) %}
        {% else %}
          {% set newAnswerSchema = (newAnswerSchema.push(answerSchema[loop.index0]), newAnswerSchema) %}
      {% endif %}
    {% endfor %}
      {% set answerSchema = newAnswerSchema %}
  {% endif %}
  {% set selectedArray = [] %}
  {% for answer in answerSchema %}
    {% if answer.checked == true or answer.selected == true %}
      {% set selectedArray = (selectedArray.push(answer.text), selectedArray) %}
    {% endif %}
  {% endfor %}
  {% for answer in selectedArray %}
      {{- answer }}{{ ", " if not loop.last else "" -}}
  {% endfor %}
{% endmacro %}

{%- macro getQuestionText(question) -%}
  {{ question.questionText }}
{%- endmacro -%}

{%- macro getQuestionAnswer(question, row='0') -%}
  {% if question.answer | isArr %}
    {% set value = question.answer[row] %}
  {% else %}
    {% set value = question.answer %}
  {% endif %}
  {% switch question.answerType %}
    {% case 'date' %}{{ value | date("DD MMMM YYYY") }}
    {% case 'radio' %}{{ compileMultiValueAnswer(question.answerSchemas, value) }}
    {% case 'checkbox' %}{{ compileMultiValueAnswer(question.answerSchemas, value) }}
    {% default %}{{ value }}
  {% endswitch %}
{%- endmacro -%}


{# templates for each question type #}
{% set questionAnswer = bodyAnswer or question.answer or '' %}
{% set errorMessage = thisErrorMessage or errors[question.questionCode] %}

{% if question.type == 'group' %}
  <h2 class="govuk-heading-m">
    {{ question.title }}
  </h2>


  {% for question in question.contents %}
      {{ renderQuestion(question, errors, bodyAnswers[question.questionCode]) }}
  {% endfor %}
{% endif %}


{% if question.type == 'table' or question.type == 'tableGroup'%}
  {#  find first question that is not presentational #}
  {% set firstDataColumn = null %}
  {% for questions in question.contents %}
    {% if 'presentation:' not in questions.answerType %}
      {% if firstDataColumn == null %}
        {% set firstDataColumn = loop.index0 %}
      {% endif %}
    {% endif %}
  {% endfor %}

  {% set numColumns = question.contents.length %}

  {% if (question.contents[firstDataColumn].answer | isArr) and question.contents[firstDataColumn].answer.length > 0 %}
    {% set numRows = question.contents[firstDataColumn].answer.length %}
  {% else %}
    {% set numRows = 1 %}
  {% endif %}
  
  {% if (question.contents[firstDataColumn].answer.length) == 0 %}
    {% set defaultAnswer = 'n/a' %}
  {% endif %}

  <table class="govuk-table govuk-table-xl">
    <caption class="govuk-table__caption govuk-table__caption--l">{{ question.title }}</caption>
    <thead class="govuk-table__head">
    <tr class="govuk-table__row">
    {% set firstDataColumn = null %}
    {% for tableItems in question.contents %}
      {% if 'presentation:' not in tableItems.answerType %}
        {% if firstDataColumn == null %}
          {% set firstDataColumn = loop.index0 %}
        {% endif %}
        <th scope="col" class="govuk-table__header" aria-sort="none">{{ tableItems.questionText }}</th>
      {% endif %}
    {%  endfor %}
      <th scope="col" class="govuk-table__header" aria-sort="none">Action</th>
    </thead>

    <tbody class="govuk-table__body">
    {% for row in range(0, numRows) %}
    <tr class="govuk-table__row">
      {% for column in range(0, numColumns) %}
        {% if 'presentation:' not in  question.contents[column].answerType %}
          <td class="govuk-table__cell govuk-table__cell-wrap">{% if defaultAnswer %}{{ defaultAnswer }}{% else %}{{ getQuestionAnswer(question.contents[column], row) }}</td>
        {% endif %}{% endif %}
      {% endfor %}
      <td class="govuk-table__cell">
        <ul class="govuk-list">
          {% if not defaultAnswer %}
            <li><a class="govuk-link--no-visited-state" aria-label="Edit {{ getQuestionAnswer(question.contents[firstDataColumn], row) }}" href="{{ requested_url }}/edit/{{ question.tableCode }}/{{ loop.index0 }}">Edit</a></li>
            <li><a class="govuk-link--no-visited-state" aria-label="Delete {{ getQuestionAnswer(question.contents[firstDataColumn], row) }}"href="{{ requested_url }}/delete/{{ question.tableCode }}/{{ loop.index0 }}">Remove</a></li>
          {% endif %}
        </ul>
      </td>
    </tr>
    {%  endfor %}
      </tbody>
      </table>

{% endif %}

{% if question.attributes.readonly == true and (question.questionCode).slice(0, 2) != 'ui'%}
  {% if question.questionText or question.questionAnswer %}

  <!-- {{ question.questionCode }} rendered as readonly -->
  {{ govukSummaryList({
    classes: 'govuk-summary-list--no-border govuk-summary-list--no-bottom-margin',
    rows: [
      {
        key: {
          text: question.questionText
        },
        value: {
          html: questionAnswer | safe
        }
      }
    ]
  }) }}
  {% endif %}

{% else %}
  {% set qType = question.answerType %}
  {% set regExp1 = r/^presentation: link.*/gi %}
  {% if regExp1.test(qType) %}
    {% set linkTarget = question.answerType | extractLink | doReplace('<base>', requested_url) %}
    {% set qType = 'presentation: link' %}
  {% endif %}

  {% set regExp2 = r/^presentation: buttonlink.*/gi %}
  {% if regExp2.test(qType) %}
    {% set linkTarget = question.answerType | extractLink | doReplace('<base>', requested_url) %}
    {% set qType = 'presentation: buttonlink' %}
  {% endif %}

  {% if qType == 'numeric' %}
    {% set formClass = question.formClasses + ' numeric' %}
    {% set qType = 'freetext' %}
  {% endif %}

  {% switch qType %}
    {% case 'presentation: heading' %}
      <h2 id="conditional-id-form-{{ question.questionCode }}" class="govuk-heading-m">{{ question.questionText }}</h2>
    {% case 'presentation: heading_large' %}
      <h2 id="conditional-id-form-{{ question.questionCode }}" class="govuk-heading-l">{{ question.questionText }}</h2>
    {% case 'presentation: divider' %}
      <hr id="conditional-id-form-{{ question.questionCode }}" class="govuk-section-break govuk-section-break--m govuk-section-break--visible">
    {% case 'presentation: body' %}
      <p id="conditional-id-form-{{ question.questionCode }}" class="govuk-text ">{{ question.questionText }}</p>
    {% case 'presentation: link' %}
      <div id="conditional-id-form-{{ question.questionCode }}" class="body-link__container"><a href="{{ linkTarget }}" class="govuk-link body-link">{{ question.questionText }}</a></div>
    {% case 'presentation: buttonlink' %}
      {{ govukButton({
        text: question.questionText,
        classes: 'govuk-button--secondary',
        href: linkTarget
      }) }}
    {% case 'presentation: inset' %}
      <div id="conditional-id-form-{{ question.questionCode }}" class="govuk-inset-text">{{ question.questionText }}</div>
    {% case 'noinput' %}
      {{ govukInput({
        id: question.questionCode,
        name: question.questionCode,
        formGroup : {
          classes: formClass or question.formClasses
        },
        classes: 'moj-hidden',
        attributes: question.attributes,
        label: {
          text: question.questionText,
          isPageHeading: false,
          classes: question.questionCode + ' govuk-label--m'
        },
        hint: {
          text: question.helpText
        },
        errorMessage: errorMessage
      }) }}
    {% case 'freetext' %}
      {{ govukInput({
        id: question.questionCode,
        name: question.questionCode,
        value: questionAnswer | encodeHtml | safe,
        formGroup : {
          classes: formClass or question.formClasses
        },
        attributes: question.attributes,
        label: {
          text: question.questionText,
          isPageHeading: false,
          classes: question.questionCode + ' govuk-label--m'
        },
        hint: {
          text: question.helpText
        },
        errorMessage: errorMessage
      }) }}
    {% case 'textarea' %}
    {{ govukCharacterCount({
      name:question.questionCode,
      id: question.questionCode,
      maxlength: 4000,
      value: questionAnswer | encodeHtml | safe,
      label: {
        text: question.questionText,
        isPageHeading: false,
        classes: question.questionCode + ' govuk-label--m'
      },
      formGroup : {
        classes: question.formClasses
      },
      attributes: question.attributes,
      hint: {
        text: question.helpText
      },
      errorMessage: errorMessage
    }) }}

  {% case 'radio' %}
      {{ govukRadios({
        idPrefix: question.questionCode,
        name: question.questionCode,
        formGroup : {
          classes: question.formClasses
        },
        attributes: question.attributes,
        fieldset: {
          legend: {
            text: question.questionText,
            classes: question.questionCode + ' govuk-label--m'
          }
        },
        items: question.answerSchemas,
        errorMessage: errorMessage,
        isConditional: question.isConditional,
        hint: {
          text: question.helpText
        }
      }) }}
    {% case 'checkbox' %}
      {{ govukCheckboxes({
        idPrefix: question.questionCode,
        name: question.questionCode,
        formGroup : {
          classes: question.formClasses
        },
        attributes: question.attributes,
        fieldset: {
          legend: {
            text: question.questionText,
            classes: question.questionCode + ' govuk-label--m'
          }
        },
        items: question.answerSchemas,
        errorMessage: errorMessage,
        isConditional: question.isConditional,
        hint: {
          text: question.helpText
        }
      }) }}

    {% case 'checkboxGroup' %}
      {{ govukCheckboxes({
        idPrefix: question.questionCode,
        name: question.questionCode,
        formGroup : {
          classes: question.formClasses
        },
        attributes: question.attributes,
        fieldset: {
          legend: {
            text: question.questionText,
            classes: question.questionCode + ' govuk-label--m'
          }
        },
        items: question.answerSchemas,
        errorMessage: errorMessage,
        isConditional: question.isConditional,
        hint: {
          text: question.helpText
        }
      }) }}

    {% case 'dropdown' %}
      {{ govukSelect({
        id: question.questionCode,
        name: question.questionCode,
        formGroup : {
          classes: question.formClasses
        },
        label: {
          text: question.questionText,
          classes: question.questionCode + ' govuk-label--m'
        },
        attributes: question.attributes,
        items: question.answerSchemas,
        errorMessage: errorMessage,
        isConditional: question.isConditional,
        hint: {
          text: question.helpText
        }
      }) }}

    {% case 'date' %}
    {% set dateAnswer = question.answer.split('-') %}
      {% if dateAnswer.length > 0 %}
        {% set answerDay = dateAnswer[2] %}
        {% set answerMonth = dateAnswer[1] %}
        {% set answerYear = dateAnswer[0] %}
      {% else %}
        {% set answerDay = '' %}
        {% set answerMonth = '' %}
        {% set answerYear = '' %}
      {% endif %}

      {{ govukDateInput({
        id: question.questionCode,
        namePrefix: question.questionCode,
        fieldset: {
          legend: {
            text: question.questionText,
            isPageHeading: false,
            classes: question.questionCode + ' govuk-label--m'
          }
        },
        hint: {
          text: question.helpText
        },
        items: [
          {
            classes: "govuk-input--width-2",
            name: "day",
            value: answerDay
          },
          {
            classes: "govuk-input--width-2",
            name: "month",
            value: answerMonth
          },
          {
            classes: "govuk-input--width-4",
            name: "year",
            value: answerYear
          }
        ],
        errorMessage: errorMessage,
        attributes: question.attributes
      }) }}

    {% default %}
      <!-- {{ question.questionCode }} - {{ question.answerType }} questions are not currently rendered -->
  {% endswitch %}
{% endif %}
