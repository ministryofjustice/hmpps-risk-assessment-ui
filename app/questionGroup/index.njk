{% extends "common/templates/layout.njk" %}
{% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}
{% from "govuk/components/back-link/macro.njk" import govukBackLink %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/textarea/macro.njk" import govukTextarea %}
{% from "govuk/components/radios/macro.njk" import govukRadios %}
{% from "govuk/components/select/macro.njk" import govukSelect %}

{% set errorHeading = "Error - " + heading %}

{% block pageTitle %}
    {% if errors %}
        {{ errorHeading }}
    {% else %}
        {{ heading }}
    {% endif %}
{% endblock %}

{% block beforeContent %}
    <div role="navigation" aria-label="back">
        {{ govukBackLink({
            href: "/assessments"
        }) }}
    </div>
{% endblock %}

{% block content %}
    {# include errorSummary partial #}
    {{ super() }}

    <h1 class="govuk-heading-l">
        {{ heading }}
    </h1>

    <h2 class="govuk-heading-m">
        {{ subheading }}
    </h2>

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">

            <form method="post" id="{{ groupId }}" novalidate>

                {# templates for each question type #}
                {% for question in questions %}
                    {% switch question.answerType %}
                    {% case 'freetext' %}
                        {{ govukInput({
                            id: 'id-' + question.questionId,
                            name: 'id-' + question.questionId,
                            value: question.answer | encodeHtml | safe,
                            label: {
                                text: question.questionText,
                                isPageHeading: false,
                                classes: question.questionCode
                            },
                            hint: {
                                text: question.hint
                            }
                        }) }}
                    {% case 'textarea' %}
                        {{ govukTextarea({
                            id: 'id-' + question.questionId,
                            name: 'id-' + question.questionId,
                            value: question.answer | encodeHtml | safe,
                            label: {
                                text: question.questionText,
                                isPageHeading: false,
                                classes: question.questionCode
                            },
                            hint: {
                                text: question.hint
                            }
                        }) }}
                    {% case 'radio' %}
                        {{ govukRadios({
                            idPrefix: 'id-' + question.questionId,
                            name: 'id-' + question.questionId,
                            fieldset: {
                                legend: {
                                    text: question.questionText
                                }
                            },
                            items: question.answerSchemas
                        }) }}

                    {% case 'dropdown' %}
                        {{ govukSelect({
                            id: 'id-' + question.questionId,
                            name: 'id-' + question.questionId,
                            label: {
                                text: question.questionText
                            },
                            items: question.answerSchemas
                        }) }}

                    {% default %}
                        <!-- {{ question.questionId }} - {{ question.answerType }} questions are not currently rendered -->
                    {% endswitch %}

                {% endfor %}

                {% if last %}
                    {{ govukButton({
                        text: 'Save',
                        classes: 'govuk-!-margin-bottom-3'
                    }) }}
                {% else %}
                    {{ govukButton({
                        text: 'Continue',
                        classes: 'govuk-!-margin-bottom-3'
                    }) }}
                {% endif %}
            </form>
        </div>
    </div>
{% endblock %}
